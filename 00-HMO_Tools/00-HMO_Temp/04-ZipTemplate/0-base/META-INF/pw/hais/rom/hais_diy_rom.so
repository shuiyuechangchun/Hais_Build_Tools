#!/bin/bash
BASH_PATH=/tmp/Hais/ReplaceFile
configFile='/sdcard/.hais'
if [ ! -d $configFile ];then touch $configFile;fi
source $configFile		#导入变量

#删除多余文件
#rm -rf /system_root/debug_ramdisk
rm -rf /system_root/lost+found
rm -rf /cache/lost+found
rm -rf /data/lost+found
rm -rf /data/magisk_backup_*
rm -rf /mnt/vendor/persist/lost+found

#判断是否去除缓存
oldMd5=`md5sum -b "/data/.hais" | cut -d" " -f1`
newMd5=`md5sum -b "$configFile" | cut -d" " -f1`
if [ "$oldMd5" != "$newMd5" ] || [ "$delCache" == "YES" ] ;then 
	echo '开始删除缓存，开机后重新编译'
	rm -rf /data/dalvik-cache
	rm -rf /data/system/package_cache
fi



#替换system所有文件
repType=system
for file in `find $BASH_PATH/${repType}_files/* -type f`
	do
		tmpPath=${file%/*}									#刷机包中的路径
		sysfile=${repType}${file##*${repType}_files}	#准备要替换或增加的目标文件
		sysPath=${sysfile%/*}					#准备要替换或增加的文件
		echo "- 备份并替换 $file"
		echo "mkdir -p /$sysPath"
		echo "cp  $file /$sysfile"
		echo "chmod 644 /$sysfile"
		mkdir -p /$sysPath					#创建目标目录 /system/app/Via/
		cp  $file /$sysfile					#替换文件
		chmod 644 /$sysfile					#修复权限
	done
	

#替换vendor所有文件
repType=vendor
for file in `find $BASH_PATH/${repType}_files/* -type f`
	do
		tmpPath=${file%/*}									#刷机包中的路径
		sysfile=${repType}${file##*${repType}_files}	#准备要替换或增加的目标文件
		sysPath=${sysfile%/*}					#准备要替换或增加的文件
		echo "- 备份并替换 $file"
		echo "mkdir -p /$sysPath"
		echo "cp  $file /$sysfile"
		echo "chmod 644 /$sysfile"
		mkdir -p /$sysPath					#创建目标目录 /system/app/Via/
		cp  $file /$sysfile					#替换文件
		chmod 644 /$sysfile					#修复权限
	done
	
	

#替换cust所有文件
repType=cust
for file in `find $BASH_PATH/${repType}_files/* -type f`
	do
		tmpPath=${file%/*}									#刷机包中的路径
		sysfile=${repType}${file##*${repType}_files}	#准备要替换或增加的目标文件
		sysPath=${sysfile%/*}					#准备要替换或增加的文件
		echo "- 备份并替换 $file"
		echo "mkdir -p /$sysPath"
		echo "cp  $file /$sysfile"
		echo "chmod 644 /$sysfile"
		mkdir -p /$sysPath					#创建目标目录 /system/app/Via/
		cp  $file /$sysfile					#替换文件
		chmod 644 /$sysfile					#修复权限
	done
	

#替换data所有文件
repType=data
for file in `find $BASH_PATH/${repType}_files/* -type f`
	do
		tmpPath=${file%/*}									#刷机包中的路径
		sysfile=${repType}${file##*${repType}_files}	#准备要替换或增加的目标文件
		sysPath=${sysfile%/*}					#准备要替换或增加的文件
		echo "- 备份并替换 $file"
		echo "mkdir -p /$sysPath"
		echo "cp  $file /$sysfile"
		echo "chmod 644 /$sysfile"
		mkdir -p /$sysPath					#创建目标目录 /system/app/Via/
		cp  $file /$sysfile					#替换文件
		chmod 644 /$sysfile					#修复权限
	done
	

#执行部分Prop优化，在文件末尾追加
if [ ! -n "$dex2oat" ];then dex2oat='everything';fi
echo "- 优化编译模式为 $dex2oat "
echo -e "\npm.dexopt.install=$dex2oat" >> /system/build.prop
echo -e "\npm.dexopt.first-boot=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.boot=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.install=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.bg-dexopt=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.ab-ota=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.inactive=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.shared=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.bg-dexopt=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.core-app=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.forced-dexopt=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.nsys-library=$dex2oat" >> /system/etc/prop.default
echo -e "\npm.dexopt.shared-apk=$dex2oat" >> /system/etc/prop.default


#判断是否修改加密方式
if [ "$encryption" == "YES"  ];then
	echo "已启用强制加密"
	sed -i 's/secure=1/secure=0/' $WORK_SRC_PATH/vendor/default.prop
#	sed -i 's/,verify//' $WORK_SRC_PATH/vendor/etc/fstab.qcom
	sed -i 's/encryptable=/fileencryption=/' $WORK_SRC_PATH/vendor/etc/fstab.qcom
	sed -i 's/encryptable=/fileencryption=/' $WORK_SRC_PATH/vendor/etc/fstab.qcom
	sed -i 's/encryptable=/fileencryption=/' $WORK_SRC_PATH/vendor/etc/fstab.qcom
	sed -i 's/.dmverity=false/.dmverity=true/' $WORK_SRC_PATH/vendor/etc/fstab.qcom
fi

#备份配置文件
cp $configFile /data/
