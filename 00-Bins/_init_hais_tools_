#!/bin/bash
SH_FILE="$PWD"						#脚本的文件
BINS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"	#依赖目录
BASE_PATH=${BINS%/*}							#脚本的目录
INIT_FILE=$BINS/_init_hais_tools_				#存放变量目录
ROM_FILE=${1}									#ROM文件
ROM_NAME="$(basename "$ROM_FILE")"				#ROM的目录
ZIP_LEVEL=1										#压缩等级
ApkTools="java -jar $PWD/00-Bins/apktool.jar"

WORK_TMP_PATH=$BASE_PATH/11-TempWork			#存放临时文件	
WORK_SRC_PATH=$BASE_PATH/12-SrcWork				#存放解包后等待修改的文件	
WORK_OUT_PATH=$BASE_PATH/13-OutWork				#存放欲打包的文件
WORK_ROM_PATH=$BASE_PATH/90-RomFile				#存放打包后的rom
WORK_BAK_PATH=$BASE_PATH/91-BakFile				#存放修改前的备份文件
WORK_HMO_PATH=$BASE_PATH/92-HMOFile				#存放打修改前的文件
LOG_FILE=$WORK_TMP_PATH/log.txt						#日记的目录

TOOLS_HMO_PATH=$BASE_PATH/00-HMO_Tools			#HMO_Tools工具路径
TOOLS_HMO_TEMP=$TOOLS_HMO_PATH/00-HMO_Temp		#HMO_Tools工具模板目录

brotli=$BINS/brotli 	
sdat2img=$BINS/sdat2img.py
imgextractor=$BINS/imgextractor.py

ext4fs=$BINS/make_ext4fs
#ext4fs=$BINS/make_ext4fs_sj
img2sdat=$BINS/img2sdat.py
rimg2sdat=$BINS/rimg2sdat.py

show(){ 
	echo  -e "\033[32m【`date '+%H:%M:%S'`】${1}\033[0m" | tee -a $LOG_FILE 
}

getProp() { grep "$1" "${WORK_SRC_PATH}/system/system/build.prop" | cut -d "=" -f 2; }

clean(){
	show "正在清理遗留文件..."
	rm -rf $LOG_FILE
	rm -rf $WORK_TMP_PATH
	rm -rf $WORK_SRC_PATH
	rm -rf $WORK_OUT_PATH
	rm -rf $WORK_BAK_PATH
}

unImage(){
	show "----------------解压 ${1} 分区----------------"
	show "转换 ${1}.new.dat.br 为 ${1}.new.dat"
	brotli -dj $WORK_TMP_PATH/${1}.new.dat.br | tee -a $LOG_FILE
	show "转换 ${1}.new.dat 为 ${1}.img"
	python3 $sdat2img $WORK_TMP_PATH/${1}.transfer.list $WORK_TMP_PATH/${1}.new.dat  $WORK_TMP_PATH/${1}.img | tee -a $LOG_FILE
	show "解压 ${1}.img"
	mkdir -p $WORK_SRC_PATH/${1}
	python3 $imgextractor $WORK_TMP_PATH/${1}.img $WORK_SRC_PATH/${1}  | tee -a $LOG_FILE
}

zipImage(){ #保持动态分区打包
	show "----------------开始打包 ${1} 分区----------------"
	show "正在ext4fs打包 ${1} "
	imgSize=`cat "$WORK_SRC_PATH/${1}_size.txt"`
	if [ "${1}" = "system" ] ;then 
		$ext4fs -s -T 0 -C "$WORK_SRC_PATH/${1}_fs_config" -S "$WORK_SRC_PATH/${1}_file_contexts" -l $imgSize -a / "$WORK_TMP_PATH/${1}.img" "$WORK_SRC_PATH/${1}"  >>$LOG_FILE
	else
		$ext4fs -s -T 0 -C "$WORK_SRC_PATH/${1}_fs_config" -S "$WORK_SRC_PATH/${1}_file_contexts" -l $imgSize -a ${1} "$WORK_TMP_PATH/${1}.img" "$WORK_SRC_PATH/${1}"  >>$LOG_FILE
	fi

	show "正在转换 ${1}.img 为 ${1}.new.dat"
	python3 $img2sdat "$WORK_TMP_PATH/${1}.img" -o $WORK_TMP_PATH -v 4 -p ${1}  >>$LOG_FILE
	if [ "$ZIP_LEVEL" = "9"  ] ; then 
		BR_LEVEL=Z
	else
		BR_LEVEL=$ZIP_LEVEL
	fi
	show "brotli-${BR_LEVEL}转换 ${1}.new.dat 为 ${1}.new.dat.br"
	brotli -${BR_LEVEL} -j -w 24 "$WORK_TMP_PATH/${1}.new.dat" -o "$WORK_OUT_PATH/${1}.new.dat.br"
	mv -f "$WORK_TMP_PATH/${1}.patch.dat" "$WORK_OUT_PATH/"
	mv -f "$WORK_TMP_PATH/${1}.transfer.list" "$WORK_OUT_PATH/"
}


repairFsAndCtx(){	#修复 Fs 和 Ctx
	sysFile=${2/$WORK_SRC_PATH/""}	#系统内文件路径
	sysFile=${sysFile:1}		#去除前面的斜杠
	#判断是 system 还是 vendor
	repariType="system"
	fileType="system_file"
	filePermission="00644"
	if [[ ${sysFile:0:6} = "vendor"* ]] ;then repariType="vendor" ; fi
	if [[ $sysFile = *"/xbin/"* ]] ;then 
		fileType="${2##*/}_exec" 
		filePermission="00755"
	fi
	show "修复 $repariType Fs 和 Ctx -> $sysFile"
	if [ -f $1 ] ;then 
		path=`echo ${sysFile%/*} | sed 's#system\/##'`
		
		if [ `grep -c "$path " "${WORK_SRC_PATH}/${repariType}_fs_config"` == '0' ];then
			echo "$(dirname $path)  0 0 0755" >> "${WORK_SRC_PATH}/${repariType}_fs_config"
			echo "$path  0 0 0755" >> "${WORK_SRC_PATH}/${repariType}_fs_config"
		fi
	fi
	
	echo "$(echo $sysFile | sed 's/system\///') 0000 0000 ${filePermission}" >> "${WORK_SRC_PATH}/${repariType}_fs_config"
	echo "$(echo $sysFile | sed 's/system\//\//') u:object_r:${fileType}:s0" >> "${WORK_SRC_PATH}/${repariType}_file_contexts"
}

deleteBack(){	#传入文件或者文件夹，单个	deleteBack 需要删除的文件.txt
	show "删除 文件/文件夹 并备份->${1/$PWD/""}"
	mkdir -p $WORK_BAK_PATH${1%/*}
	mv ${WORK_SRC_PATH}${1} $WORK_BAK_PATH${1} 2>>$LOG_FILE
}


replaceBack(){	#替换并备份	replaceBack  新文件 旧文件，
	#show "替换 文件 并备份 ${1/$PWD/""}"
	backPaht=${WORK_BAK_PATH}${2/$WORK_SRC_PATH/""}
	
	mkdir -p ${backPaht%/*}		#创建备份路径
	mkdir -p ${2%/*}			#创建目录到系统
	
	#修复权限
	if [ "${3}" = "fs" ] ;then repairFsAndCtx ${1} ${2} ; fi

	cp -r ${2} ${backPaht} 2>>$LOG_FILE		#备份文件
	cp -r ${1} ${2}	2>>$LOG_FILE			#复制新文件夹，替换到系统
}


mergeEndBack(){	#传入原文件 和 需要增加的文件 mergeEndBack 原始.txt 需要加入的内容.txt
	show "追加内容 并备份->${1}"
	mkdir -p $WORK_BAK_PATH${1%/*}
	cp  $WORK_SRC_PATH${1} $WORK_BAK_PATH${1}
	cat ${2} >> $WORK_SRC_PATH${1}
	if [ "${3}" != "" ] ;then repairFsAndCtx ${2} ; fi
}


doUnApk(){	#反编译软件修改
	DeviceName=$(getProp "ro.product.system.device")
	AndroidApi=$(getProp 'ro.build.version.sdk')
	show "反编译：${1}"
	TMP_FILE_PATH=$WORK_TMP_PATH/${1##*/}
	rm -rf $TMP_FILE_PATH
	rm -rf $TMP_FILE_PATH.new
	$ApkTools -r -b -f d -c -api $AndroidApi --use-aapt2 "$WORK_SRC_PATH${1}" -o "$TMP_FILE_PATH" -t $DeviceName | tee -a $LOG_FILE
	for file in `find ${2}/* -type f` ;do
		doInsert $file ${TMP_FILE_PATH}
	done
	show "正在回编译：${1}"
	$ApkTools -r -b -f b -c -api $AndroidApi --use-aapt2 "$TMP_FILE_PATH" -o "${TMP_FILE_PATH}${1}.new" -t $DeviceName| tee -a $LOG_FILE 
	zipalign 4 "${TMP_FILE_PATH}${1}.new" "${TMP_FILE_PATH}${1}.new.zipalign"
	replaceBack "${TMP_FILE_PATH}${1}.new.zipalign" "$WORK_SRC_PATH$1" 
}






doInsert(){		#插入文件替换内容
	echo ""
	show "开始配置：${1##*/}"
	source $1		#读取文件变量
	show "寻找插入：$FIND_START"
	FINS_RES=$2/$SMALI_FILE
	
	if [ ! -n "$SMALI_FILE" ] ; then 
		FINS_RES=`find $2 -name *.smali | xargs grep -e "$FIND_START"`
		FINS_RES=${FINS_RES/:$FIND_START/""}
	fi
	
	if [ -n "$FINS_RES" ] ; then 
		oldStr=`sed -n "/$FIND_START/,/$FILE_END/p" $FINS_RES`
		if [ ! -n "$FIND_START" ];then oldStr=$DEFAULT_CODE ;fi
		if [ -n "$oldStr" ];then
			res=`python3 $BINS/repStr.py "$FINS_RES" "$oldStr" "$REPLACE_CODE"`
			cat > "$LOG_FILE.${1##*/}.txt" <<EOF
配置文件: $1
要处理的文件: $FINS_RES
-----------------------原始字符串------------------------
$oldStr
-----------------------新的字符串-----------------------
$REPLACE_CODE
------------------------替换结果-------------------------
$res
EOF
			show "处理结束：已完成插入"
		else
			show "无插入点：$FILE_END"
		fi
	else
		show "文件不在：${FINS_RES}"
	fi
	
	SMALI_FILE=""
	FIND_START=""
	DEFAULT_CODE=""
	REPLACE_CODE=""
	echo ""
}


createMagisk(){  #创建Magisk面具模块
	DeviceName=$(getProp "ro.product.system.device")
	RomVersion=$(getProp "ro.system.build.version.incremental")
	RomPath=$WORK_ROM_PATH/$DevicePathName/${1}/${DeviceName^}_${RomVersion}
	NowDay=$(date "+%Y%m%d")
	MagiskName="$2"
	MagiskFileName="Magisk@${MagiskName}_${DeviceName^}_${RomVersion}"
	MagiskPath=$WORK_TMP_PATH/$MagiskFileName
	show "正在打包 $MagiskFileName"
	rm -rf "${MagiskPath}"
	mkdir -p "$MagiskPath"
	unzip -o $TOOLS_HMO_TEMP/Magisk_Template.zip -d "$MagiskPath" >>$LOG_FILE
	sed -i "s/id=hais_lite_test/id=hais_lite_${MagiskName}/" $MagiskPath/module.prop
	sed -i "s/name=HaisMagiskTmp/name=${MagiskName}_${RomVersion}/" $MagiskPath/module.prop
	sed -i "s/version=0/version=${RomVersion}/" $MagiskPath/module.prop
	sed -i "s/versionCode=0/versionCode=${NowDay}/" $MagiskPath/module.prop
	for file in $3 ; do
		path=$(dirname ${file/$WORK_BAK_PATH\/system/$MagiskPath})
		mkdir -p $path
		cp -rp "${file}" $path
	done
	7z a -tzip -r "${MagiskPath}.zip" "${MagiskPath}/*" -mx=1  >>  $LOG_FILE
	mkdir -p "$RomPath"
	mv ${MagiskPath}.zip ${RomPath}
}


show "脚本初始化：${0}"
